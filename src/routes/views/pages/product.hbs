<h1>Agregar Producto</h1>
<form id="productForm">
    <label for="title">Título:</label>
    <input type="text" id="title" name="title" required><br>
    <label for="description">Descripción:</label>
    <textarea id="description" name="description" required></textarea><br>
    <label for="price">Precio:</label>
    <input type="number" id="price" name="price" required><br>
    <label for="thumbnail">URL de la miniatura:</label>
    <input type="text" id="thumbnail" name="thumbnail" required><br>
    <label for="code">Código:</label>
    <input type="text" id="code" name="code" required><br>
    <label for="stock">Cantidad en stock:</label>
    <input type="number" id="stock" name="stock" required><br>
    <button type="submit">Agregar Producto</button>
</form>

<h2>Productos en stock:</h2>
<ul>
    {{#each products}}
        <li>{{ _id }} - Producto: {{ title }} - Precio: {{ price }} - {{ thumbnail }} - Codigo:{{code}} - Stock {{stock}}
            <button onclick="editProduct('{{ _id }}')">Editar</button>
            <button onclick="deleteProduct('{{ _id }}')">Eliminar</button>
            <button onclick="addToCart('{{ _id }}', event)" data-product-id="{{ _id }}">Agregar al Carrito</button>

        </li>
    {{/each}}
</ul>

<div id="cartSelectionModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Seleccionar Carrito:</h2>
        <select id="cartSelect">
            {{#each carts}}
            <option value="{{ _id }}">{{ _id }}</option>
            {{/each}}
        </select>
        <label for="productQuantity">Cantidad:</label>
        <input type="number" id="productQuantity" name="productQuantity" value="1" min="1"><br>
        <button id="addToCartButton">Agregar Producto</button>
    </div>
</div>

<script>
document.getElementById('productForm').addEventListener('submit', agregarProducto);
 document.addEventListener('DOMContentLoaded', async () => {
    const cartsResponse = await fetch('/api/products/carts');
    const carts = await cartsResponse.json();
    const cartSelect = document.getElementById('cartSelect');
    carts.forEach(cart => {
      const option = document.createElement('option');
      option.value = cart._id;
      option.textContent = cart._id;
      cartSelect.appendChild(option);
    });
  });
document.querySelectorAll('button[data-product-id]').forEach(button => {
    button.addEventListener('click', event => {
        const productId = event.target.dataset.productId;
        addToCart(productId, event);
    });
});
function agregarProducto(event) {
    event.preventDefault();

    const product = {
        title: document.getElementById('title').value,
        thumbnail: document.getElementById('thumbnail').value,
        price: document.getElementById('price').value,
        stock: document.getElementById('stock').value
    };

    const formData = new FormData(event.target);
    formData.forEach((value, key) => {
        product[key] = value;
    });

    fetch('api/products/', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(product)
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Error al agregar el producto');
        }
        return response.json();
    })
    .then(data => {
        alert('¡Producto agregado con éxito!');
    })
    .catch(error => {
        const code = product.code;
        const errorMessage = `Error al agregar el producto: ${code} ya existe en la base de datos`;
        alert(errorMessage);
    });
}


function editProduct(id) {
    const newTitle = prompt('Ingrese el nuevo título:');
    const newDescription = prompt('Ingrese la nueva descripción:');
    const newPrice = prompt('Ingrese el nuevo precio:');
    const newThumbnail = prompt('Ingrese la nueva URL de la miniatura:');
    const newCode = prompt('Ingrese el nuevo código:');
    const newStock = prompt('Ingrese la nueva cantidad en stock:');
    
    if (newTitle && newDescription && newPrice && newThumbnail && newCode && newStock) {
        fetch(`api/products/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title: newTitle,
                description: newDescription,
                price: newPrice,
                thumbnail: newThumbnail,
                code: newCode,
                stock: newStock
            })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
        })
        .catch(error => console.error('Error:', error));
    } else {
        alert('Debe ingresar todos los campos para editar el producto.');
    }
}

function deleteProduct(id) {
    if (confirm('¿Está seguro de eliminar este producto?')) {
        fetch(`/api/products/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
        })
        .catch(error => console.error('Error:', error));
    }
}

function addToCart(productId, event) {
    event.stopPropagation();
    document.getElementById('addToCartButton').setAttribute('data-product-id', productId);
    document.getElementById('cartSelectionModal').style.display = 'block';
}

function closeModal() {
    document.getElementById('cartSelectionModal').style.display = 'none';
}

document.getElementById('addToCartButton').addEventListener('click', addToCartFromModal);

async function addToCartFromModal() {
    const productId = document.getElementById('addToCartButton').dataset.productId;
    const cartId = document.getElementById('cartSelect').value;
    const productQuantity = document.getElementById('productQuantity').value;

    const response = await fetch('/api/carts');
    const carts = await response.json();

    const selectedCart = carts.find(c => c._id === cartId);

    if (selectedCart) {
        const productResponse = await fetch(`/api/products/${productId}`);
        const productDetails = await productResponse.json();

        fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId: productId,
                quantity: productQuantity,
                title: productDetails.title,
                thumbnail: productDetails.thumbnail,
                price: productDetails.price
            })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            closeModal();
        })
        .catch(error => console.error('Error:', error));
    } else {
        alert('Carrito no encontrado');
    }
}

</script>